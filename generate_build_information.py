import os
import re
import time

import git

# Autogenerated filename
GUI_GENERIC_CODE = os.path.join(
    os.path.dirname(__file__), 'gui_anonymiser_main.py')


def generate_version_information():
    """ Generate the version token and the date taken for this repository. """
    # Get repo information
    try:
        repo = git.Repo(search_parent_directories=True)
        url = repo.remotes.origin.url.split('.git')[0]
        sha = repo.head.object.hexsha
    except Exception:
        sha = 'none'
        url = ('https://github.com/vincent-stragier/'
               'deltamed_coherence_openutils/wiki/Anonymiser-GUI')

    date = time.strftime("%Y-%m-%dT%H:%M:%S%z", time.gmtime())

    return date, sha, url


if __name__ == '__main__':
    if os.path.exists(GUI_GENERIC_CODE):
        date, sha, url = generate_version_information()
        parameter_values_dict = {'BUILD_DATE': date,
                                 'COMMIT_HASH': sha}
        # Read the GUI ui script
        content = open(GUI_GENERIC_CODE, 'r').read()

        # Substitute the placeholders
        content_modified = re.sub(
            r"<(\w+?)>",
            lambda match: parameter_values_dict[match.group(1)],
            content)

        repository_url = f'REPOSITORY_URL = \'{url}\''
        if repository_url not in content_modified:
            content_modified = f'{content_modified}\n{repository_url}\n'

        # Overwrite the GUI ui
        open(GUI_GENERIC_CODE, 'w').write(content_modified)
        if content_modified != content:
            print(f'{__file__}: Build version has been written.')
        else:
            print(f'{__file__}: The content has not been modified.')
            exit(2)

    else:
        exit(1)
